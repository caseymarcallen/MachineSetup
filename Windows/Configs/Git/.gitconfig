#Please ensure that sgdm.exe is in the Environment Path
[merge]
    tool = beyondcompare
[mergetool]
    prompt = false
    keepBackup = false
    
[diff]
    tool = beyondcompare
[difftool]
    prompt = false
    
[mergetool "beyondcompare"]
    trustExitCode = true
    cmd = BCompare $LOCAL $REMOTE $BASE $MERGED
    
[difftool "beyondcompare"]
    cmd = BCompare \"$LOCAL\" \"$REMOTE\"    

[user]
    name = Casey Allen
    email = casey.allen@readify.net
    
[alias]
    # Obtained from http://haacked.com/archive/2014/07/28/github-flow-aliases/
    s = status
    co = checkout
    ec = config --global -e
    rh = reset --hard
    up = !git pull --prune $@ && git submodule update --init --recursive
    cob = checkout -b
    cobp = !git checkout -b $1 && git push -u origin
    c = !git add -A && git commit
    cm = !git add -A && git commit -m
    com = !git co master && git up
    save = !git add -A && git commit -m 'Savepoint'
    undo = reset HEAD~1 --mixed
    amend = commit -a --amend
    siu = stash --include-untracked
    wipe = !git add -A && git commit -qm 'Wipe Savepoint' && git reset HEAD~1 --hard
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
    sync = !git up && git push]
    squashb = !git reset $(git merge-base master $(git rev-parse --abbrev-ref HEAD))
    mi = "!f(){ git rebase -i HEAD~\"$1\"; };f"
    # branch-name    required    Name of the new branch.
    # target-branch      optional    Defaults to 'master'. The branch that the new branch is created off of.
    # commit-range        optional    The commits to migrate. Defaults to the current remote tracking branch.
    # Eg. git migrate new-branch master HEAD~1 or  git migrate new-branch other-branch
    migrate = "!f(){ CURRENT=$(git symbolic-ref --short HEAD); git checkout -b $1 && git branch --force $CURRENT ${3-'$CURRENT@{u}'} && git rebase --onto ${2-master} $CURRENT; }; f" 

    
    # Obtained from http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    grep = grep -Ii
    find = "!git ls-files | grep -i"
    lt = describe --tags --abbrev=0
    la = "!git config -l | grep alias | cut -c 7-"
    
    # Custom
    lg = log --graph --pretty=format:'%Cred%h%Creset %C(bold blue)<%an>%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' 
    behind = "!f() { \
         git merge-base HEAD $1 | xargs -I mergebase git rev-list --count $1 ^mergebase;\
       }; f"
    fom = fetch origin master:master
    rc = rebase --continue
    mt = mergetool
    dt = difftool
    lf = log --name-status
    cleanup = clean -fdx
    
[color "status"]        
    changed = blue normal bold
    added = green normal bold
    untracked = red normal bold
    modified = blue normal bold
[credential]
    helper = wincred
[core]
    autocrlf = true
    editor = code --wait
    excludesfile = C:\\Users\\casey\\Documents\\gitignore_global.txt
[advice]
    statusHints = false
[push]
    default = simple
